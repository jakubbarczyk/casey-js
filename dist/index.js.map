{"version":3,"sources":["case.js","pattern.js","casey.js","index.js"],"names":["LOWER_CASE","UPPER_CASE","CAMEL_CASE","PASCAL_CASE","KEBAB_CASE","SNAKE_CASE","TRAIN_CASE","FRAGMENT","isString","_isString","isLowerCase","_is","_pattern","isUpperCase","isCamelCase","isPascalCase","isKebabCase","isSnakeCase","isTrainCase","caseOf","_caseOf","toLowerCase","_toLowerCase","toUpperCase","_toUpperCase","toCamelCase","_toCamelCase","toPascalCase","_toPascalCase","toKebabCase","_toKebabCase","toSnakeCase","_toSnakeCase","toTrainCase","_toTrainCase","any","constructor","String","pattern","str","test","_case","prototype","call","_fragment","map","frag","idx","_tail","join","slice","match","casey"],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nexport const LOWER_CASE = 'LOWER_CASE';\r\nexport const UPPER_CASE = 'UPPER_CASE';\r\nexport const CAMEL_CASE = 'CAMEL_CASE';\r\nexport const PASCAL_CASE = 'PASCAL_CASE';\r\nexport const KEBAB_CASE = 'KEBAB_CASE';\r\nexport const SNAKE_CASE = 'SNAKE_CASE';\r\nexport const TRAIN_CASE = 'TRAIN_CASE';\r\n","'use strict';\r\n\r\nexport const LOWER_CASE = /^[^A-Z]+$/;\r\nexport const UPPER_CASE = /^[^a-z]+$/;\r\nexport const CAMEL_CASE = /^[a-z]+(?:[A-Z][a-z\\d]+)*$/;\r\nexport const PASCAL_CASE = /^[A-Z][a-z\\d]+(?:[A-Z][a-z\\d]+)*$/;\r\nexport const KEBAB_CASE = /^[a-z][a-z\\d]+(-[a-z\\d]+)+$/;\r\nexport const SNAKE_CASE = /^[a-z][a-z\\d]+(_[a-z\\d]+)+$/;\r\nexport const TRAIN_CASE = /^[A-Z][a-z\\d]+(-[A-Z][a-z\\d]+)+$/;\r\nexport const FRAGMENT = /([A-Za-z\\d]+)+/g;\r\n","'use strict';\r\n\r\nimport * as _case from './case';\r\nimport * as _pattern from './pattern';\r\n\r\nexport const isString = _isString;\r\n\r\nexport const isLowerCase = _is(_pattern.LOWER_CASE);\r\nexport const isUpperCase = _is(_pattern.UPPER_CASE);\r\nexport const isCamelCase = _is(_pattern.CAMEL_CASE);\r\nexport const isPascalCase = _is(_pattern.PASCAL_CASE);\r\nexport const isKebabCase = _is(_pattern.KEBAB_CASE);\r\nexport const isSnakeCase = _is(_pattern.SNAKE_CASE);\r\nexport const isTrainCase = _is(_pattern.TRAIN_CASE);\r\n\r\nexport const caseOf = _caseOf;\r\n\r\nexport const toLowerCase = _toLowerCase;\r\nexport const toUpperCase = _toUpperCase;\r\nexport const toCamelCase = _toCamelCase;\r\nexport const toPascalCase = _toPascalCase;\r\nexport const toKebabCase = _toKebabCase;\r\nexport const toSnakeCase = _toSnakeCase;\r\nexport const toTrainCase = _toTrainCase;\r\n\r\nfunction _isString(any) {\r\n    return typeof any === 'string' || any !== null && typeof any === 'object' && any.constructor === String;\r\n}\r\n\r\nfunction _is(pattern) {\r\n    return function (str) {\r\n        return isString(str) ? pattern.test(str) : false;\r\n    };\r\n}\r\n\r\nfunction _caseOf(str) {\r\n    if (isCamelCase(str)) return _case.CAMEL_CASE;\r\n    else if (isPascalCase(str)) return _case.PASCAL_CASE;\r\n    else if (isKebabCase(str)) return _case.KEBAB_CASE;\r\n    else if (isSnakeCase(str)) return _case.SNAKE_CASE;\r\n    else if (isTrainCase(str)) return _case.TRAIN_CASE;\r\n    else if (isLowerCase(str)) return _case.LOWER_CASE;\r\n    else if (isUpperCase(str)) return _case.UPPER_CASE;\r\n    else return null;\r\n}\r\n\r\nfunction _toLowerCase(str) {\r\n    return String.prototype.toLowerCase.call(String(str));\r\n}\r\n\r\nfunction _toUpperCase(str) {\r\n    return String.prototype.toUpperCase.call(String(str));\r\n}\r\n\r\nfunction _toCamelCase(str) {\r\n    return _fragment(_toLowerCase(String(str))).map((frag, idx) => idx === 0 ? frag : _toUpperCase(frag[0]) + _tail(frag)).join('');\r\n}\r\n\r\nfunction _toPascalCase(str) {\r\n    return _fragment(_toLowerCase(String(str))).map(frag => _toUpperCase(frag[0]) + _tail(frag)).join('');\r\n}\r\n\r\nfunction _toKebabCase(str) {\r\n    return _fragment(_toLowerCase(String(str))).join('-');\r\n}\r\n\r\nfunction _toSnakeCase(str) {\r\n    return _fragment(_toLowerCase(String(str))).join('_');\r\n}\r\n\r\nfunction _toTrainCase(str) {\r\n    return _fragment(toLowerCase(String(str))).map(frag => toUpperCase(frag[0]) + _tail(frag)).join('-');\r\n}\r\n\r\nfunction _tail(str) {\r\n    return String.prototype.slice.call(str, 1);\r\n}\r\n\r\nfunction _fragment(str) {\r\n    return String.prototype.match.call(str, _pattern.FRAGMENT);\r\n}\r\n","'use strict';\r\n\r\nimport * as casey from './casey';\r\n\r\nexport default casey;\r\n"]}